Дефиниране на функции
=====================

В частта, посветена на управлението на Карел, споменахме, че можем да отделим група от команди в отделна единица, наречена функция. Нека си припомним как изглежда функция, написана в Python:

.. activecode:: Console__functions__function_def
    :passivecode: true

    def function_name(argument_list):
        statement_1
        ...
        statement_k
        
Следните правила важат за функциите за писане в Python:

.. infonote::

    **Правила за писане на функции:**

    - Дефиницията на функцията започва с думата ``def``, последвана от името на функцията, след това списък на аргументи в скоби и '':'' знак (двоеточие) в края на реда.
    - Всяко правилно написано име може да се появи като *име на функция* (правилата са същите като за имената на променливи). 
    - Празен списък (нищо) може да се появи като аргумент *argument_list* ако функцията не използва аргументи или един или повече аргументи, разделени със запетая.
    - Всички операции на Python могат да се появят във функционалното тяло (*statement_1*,… *statement_k*). Тези команди се пишат с отстъпи по отношение на реда, съдържащ името на функцията и аргументите.

Функциите могат или не могат да върнат някаква стойност. Досега имахме възможност да видим и двата типа функции. Например функциите, чрез които Карел (роботът) се движи напред, обръща се, вдига и оставя топки, всички функции, не връщат никаква стойност. От друга страна, математически функции като *abs* или *round*, както и функции за проверка дали Карел има топки със себе си, дали има някакви топки на квадрата или дали Карел може да върви напред са функции, които връщат стойност.

Функции за писане, които връщат стойност
----------------------------------------

За да може една функция да върне стойност, е необходимо да посочите оператора *return* поне веднъж в тялото на функцията. Декларацията за връщане се състои от думата return, следвана от израз, чиято стойност функцията е да върне.

.. activecode:: console__functions_return_example

    def square(x):
        return x * x
    
    print(square(3))

*return* може да се появи на няколко места във функция (обикновено с различни стойности) и трябва да бъде посочена в края на функционното тяло. Функцията abs, ако не беше вградена, можеше да бъде дефинирана по следния начин:

.. activecode:: console__functions_def_abs
    :passivecode: true

    def abs(x):
        if x > 0:
            return x
        else:
            return -x
    
Функцията може да върне повече от една стойност. Една такава функция е вградената функция *divmod*, която връща две числа - резултат от целочислено деление и напомняне. Използваме функцията *divmod*, както правим с функции, които връщат една стойност, ние поставяме само върнатите стойности в множество променливи:

.. activecode:: console__functions_divmod_example

    quotient, reminder = divmod(813, 10)
    print('The quotient is', quotient, 'and the remainder', reminder)
    

Когато пишем функции, които връщат множество стойности, е достатъчно да посочим стойностите, разделени със запетая след думата *return*. Ако сами трябва да определим вградената функция *divmod*, бихме могли да я напишем така:

.. activecode:: console__functions_divmod_def
    :passivecode: true

    def divmod(a, b):
        return a // b, a % b

Пример
''''''

.. questionnote::

    **Example - painting:** 
    
    За боядисване на :math:`1m^{2}` стени са необходими около :math:`0.5kg` боя. Напишете функция, която приема следните 4 аргумента:
    
    - дължината на стаята
    - ширината на стаята
    - височината на стаята
    - дължина, която не се боядисва (обща ширина на вратите, прозорците, килерите и т.н.)

    Функцията трябва да връща количеството боя (в килограми), необходимо за боядисване на стените и таваните.
    
    След функцията напишете програма, която зарежда данните за 5 различни стаи и след това с помощта на написаната функция изчислява и отпечатва общото количество боя, необходимо за боядисване на всичките пет стаи.

.. activecode:: console__functions_paint2


    def paint_needed(a, b, h, not_to_paint):
        coverage = 0.5 # how many kilograms per square meter
        ceiling = a*b
        walls = h * (2*a + 2*b - not_to_paint)
        area_to_paint  = ceiling + walls
        return area_to_paint * coverage
        
    total_paint_needed = 0
    for i in range(5):
        s = input('Enter the length, width and height of the room, and the non-painting length').split()
        total_paint_needed += paint_needed(float(s[0]), float(s[1]), float(s[2]), float(s[3]))

    print("A total of", total_paint_needed, "kilograms of paint is required")  


Задачи за упражнения:
'''''''''''''''''''''

.. questionnote::

    **Задача - географски координати в GPS формат**

    Намерихте стара карта на погребаното съкровище и прочетохте координатите на съкровището в градуси, минути и секунди. Вашето GPS устройство обаче поддържа само географски координати в градуси като реални числа.
    
    Напишете програма, която за дадена координата в градуси, минути и секунди отпечатва реален брой градуси.

Програмата е почти изцяло написана. Трябва да се добави израз, за да се изчисли реалният брой градуси. За да преобразуваме минути в градуси, ги разделяме по :math:`60`, и преобразуваме секундите в градуси, като делим на :math:`60 \cdot 60 = 3600`.

.. activecode:: console__functions_GPS_1

   degrees = int(input())
   minutes = int(input())
   seconds = int(input())
   
   def deg_min_sec_to_degrees(deg, min, sec):
        # complete the function
   
   float_degrees = deg_min_sec_to_degrees(degrees, minutes, seconds)
   print(float_degrees)



.. questionnote::

    **Задача - Географски координати във формата на старата карта**
    
    След като разбрахте, че старата карта от предишното задание е шега, решихте да направите подобна шега на някого. Избрали сте местоположение наблизо и четете координати от вашето GPS устройство. Сега трябва да конвертирате координатите от устройството в реални градуси в цели градуси, цели минути и закръглени секунди, за да създадете правилна "стара" карта.
    
     Завършете стартираната програма, която извършва това преобразуване.

.. activecode:: console__functions_GPS_2

    def deg_min_sec(real_degrees):
        # complete the function by calculating three values that the function returns
        # (and then remove the comment from the following line of code)
        # return whole_degrees, whole_minutes, whole_seconds

    real_degrees = float(input())
    whole_deg, whole_min, whole_sec = deg_min_sec(real_degrees)
    print(whole_deg, whole_min, whole_sec)



.. questionnote::

    **Задача - водопроводчик:** 
    
    Майк е водопроводчик и има планирани три интервенции за днес. За всяка интервенция Майк ще записва кога е започнала и кога е приключила. Въз основа на тази информация трябва да се изчисли колко време е прекарал Майк в интервенциите.
    
    Дадена е частично написана програма, която зарежда началното и крайното време в часове и минути за всяка намеса на Майк и след това определя и отпечатва общата продължителност на всички интервенции.

    **Завършете програмата** като напишете функцията за *продължителност(h1, m1, h2, m2)* която изчислява колко изминали минути от h1 часа и минути до h2 часа и m2 минути.
    
.. activecode:: console__functions_plumber

    # write the duration function

    def process_one_intervention():
        prompt = "Enter the hour and minute of start and hour and minute of completion of the intervention "
        s1, s2, s3, s4 = input(prompt).split()
        h1, m1, h2, m2 = int(s1), int(s2), int(s3), int(s4)
        return duration(h1, m1, h2, m2)
        
    t1 = process_one_intervention()
    t2 = process_one_intervention()
    t3 = process_one_intervention()
    total_minutes = t1 + t2 + t3
    num_hours = total_minutes // 60
    num_minutes = total_minutes % 60
    print("The interventions lasted a total of", num_hours, "hours and", num_minutes, "minutes")


Функции, които не връщат стойност
---------------------------------

Функциите, които не връщат стойност, просто вършат някаква работа и ние ги използваме като команди. Такива бяха например функциите *back()* или *take_at_neighboring_square()*, които написахме в раздела, посветен на управлението на Karel. Нека да разгледаме пример за такава функция в програма с текстов интерфейс.

.. questionnote::

    **Пример - транспорт:** 
    
    Отнема съответно 55, 35, 40 и 20 минути на членовете на четиричленно семейство, за да се приберат вкъщи от мястото, където са, при условие че започнат да се прибират преди 16:00. В противен случай им трябват още 15 минути.
    
    Напишете програма, която зарежда часана отпътуване в часове и минути за всеки член на семейството и посочва часа на пристигане у дома.
    
Функцията *process_family_member* изпълнява всички необходими действия за един член на семейството: зарежда времето за отпътуване, отколкото въз основа на времето на отпътуване, ако е необходимо, удължава продължителността на пътуването, след това изчислява и отпечатва времето на пристигане у дома. В основната програма тази функция просто се извиква за всеки член на семейството.

.. activecode:: console__functions_transport

    def process_family_member(which_one, travel_duration):
        prompt = 'Enter the hour and minute of departure of the ' + which_one + ' member'
        s_hour, s_min = input(prompt).split()
        departure_hour, departure_minute = int(s_hour), int(s_min)
        if departure_hour >= 16:
            travel_duration += 15
        arrival_total_minutes = departure_hour * 60 + departure_minute + travel_duration
        arrival_hour = arrival_total_minutes // 60
        arrival_minute = arrival_total_minutes % 60
        print('The', which_one, "member arrived home at", arrival_hour, "hours and", arrival_minute, "minutes.")
        
    process_family_member("first", 55)
    process_family_member("second", 35)
    process_family_member("third", 40)
    process_family_member("fourth", 20)


Задачи за упражнения:
'''''''''''''''''''''

.. questionnote::

    **Задача - отстъпка:** 
    
    Един производител предлага стоки на цена от 10 евро на брой, а за поръчки от 50 или повече бройки се отпуска 10% отстъпка. Няколко купувачи обявиха, че идват да купуват определен брой парчета. Имената на клиентите и количествата, заявени са дадени в началото на програмата.
    
    Напишете функция, която за даденото име на клиента и количеството стоки отпечатва колко трябва да плати този клиент.

Името на клиента се предава на функцията тук само за печат. Цената на стоки се изчислява въз основа на количеството, което се предава на функцията като втори аргумент

.. activecode:: console__functions_discount

    # define the function print_price

    customers = ('Oliver', 'Freddie', 'Sophia', 'Lucas')
    quantities = (70, 28, 150, 6)
    n = len(customers)
    for i in range(n):
        print_price(customers[i], quantities[i])


.. questionnote::

    **Задача - текст подчертаване:**

    Напишете функцията за подчертаване *underline(text)*.
    
**Съвет:** Функцията *underline* трябва да съдържа само два *print* оператора. Първото изявление трябва да отпечата дадения текст, а второто - да отпечата реда. Можете да получите низ, съдържащ ред, като умножите низ ``'-'`` по дължината на дадения низ.

.. activecode:: console__functions_underlined_text

    # define the function 'underline'
    
    underline("From Celsius to Fahrenheit:")
    for c in range(15, 46, 5):
        print(c, '°C =', round(c * 9 / 5 + 32, 1), '°F.')
    print()
    
    underline("From Fahrenheit to Celsius:")
    for f in range(50, 111, 10):
        print(f, '°F =', round((f-32) * 5 / 9, 1), '°C.')

.. commented out

    def underline(text):
        print(text)
        print('-' * len(text))

~~~~

Накрая, нека споменем някои от предимствата на писането на функции, които поради краткостта на нашите примери и задачи не можеха да излязат на преден план:


    - Функциите в дългите програми често се използват, за да разложат в основната част на програмата и да я направят по-кратка и лесна за разбиране. Нашите програми не са толкова дълги, за да е необходимо да ги разложим, но показват как би могло да се направи с по-дълги програми.
    - Функциите могат да помогнат да се избегне повтарянето на същия или подобен код в програмите. Повтарянето на кода трябва да се избягва, тъй като такъв код е по-трудно да се поддържа - всяка промяна трябва да се направи на няколко места, което е досадно и вероятността загрешки е по-голяма.
    - Когато пишем функции, ние даваме възможност на други да използват части от кода ни по-лесно. Функциите, които пишем, могат да бъдат извлечени в отделен модул, който другите хора могат лесно да включат в своите програми.
    - За много големи програми, формирането на функции позволява на програмата да бъде разделена на няколко файла, вместо на един огромен и неразбираем файл.

