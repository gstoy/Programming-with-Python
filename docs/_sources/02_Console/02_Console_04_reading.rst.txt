Четене на данни
===============

Четене на текст
---------------

Програмите, които сме се научили да пишем досега, съдържат цялата необходима информация и винаги работят по същия начин. Когато се нуждаем от програма, която да направи едно и също нещо с различни данни, ще трябва да модифицираме самата програма. Този метод може да бъде доста подходящ, когато промените в данните са малки и не са чести.

Друг начин да накараме нашата програма да се справи с по-разнообразни задачи е да даде възможност за въвеждане на данни. Поставянето на данни в програма по време на нейната работа се извършва с помощта на функцията input (). Тази функция работи, като изчаква потребителя на програмата да въведе нещо (и натиснете клавиша Enter) и след това върне въведения текст в резултат.

Когато стартирате тази програма, за да видите как работи, въведете нещо и натиснете Enter. Опитайте същата програма в средата IDLE или на *repl.it*.

.. activecode:: console__text_input_first

    s = input()
    print("You wrote", s)

Програмата работи както е описано, но това поведение на програмата може да бъде объркващо. Ако някой трябва да стартира подобна програма в средата на IDLE, без да знае, че програмата очаква данни, може да изглежда, че компютърът им е заключен, защото нищо не се случва и всъщност програмата просто чакаше въвеждане от клавиатурата.

За да помогнем на потребителя да разбере какво се очаква от тях, можем да използваме и формата на функцията за въвеждане с един текстов аргумент, който ще бъде отпечатан като ръководство за потребителя. Например:

.. activecode:: console__text_input_prompt

    s = input("Write something: ")
    print("You wrote", s)

Дали ще изберем една или друга форма на функцията за въвеждане, зависи от целта на програмата. Когато пишем програма, в която други хора ще въвеждат данни, използваме формуляр с аргумент, служещ като инструкция. Когато пишем програма само за лична краткосрочна (може би дори еднократна) употреба, тогава нямаме нужда от инструкции и можем да използваме формуляр без аргументи.

Също така, имайте предвид, че за някои среди, в които се изпълнява програмата, можем да организираме, че данните се четат от друго място, където сме го подготвили предварително, вместо да четем данните от клавиатурата. В такива случаи няма чакане за въвеждане на данните, те се зареждат автоматично и няма нужда да се отпечатва инструкцията. Следователно в такива случаи бихме използвали и входната функция без аргументи.

Четене на числа
---------------

Видяхме, че функцията input () връща низ (текст, въведен от потребител). Това означава, че ако имаме нужда от данни от друг тип, трябва да променим типа данни, върнати от функцията input (), от низ до желания тип. Промяната на типа данни се нарича също преобразуване. Например, ако искаме цяло число, тогава трябва да преобразуваме получения текст в цяло число. Ето как да го направите в Python:

.. activecode:: console__text_input_int1

    s = input("Enter a whole number: ")
    n = int(s)
    print(n+n)

Функцията int () преобразува текстова стойност в цяло число. По този начин с командата n = int (s) поставяме цяло число в променливата n, поради което знакът + в програмата представлява добавянето на цели числа. Сумирането се добавя към програмата като доказателство, че n наистина е цяло число (резултатът показва, че стойностите се добавят като числа).

Тъй като функцията за въвеждане връща низ, можем да предадем резултата и директно на функцията int. По този начин избягваме да използваме променливата s и получаваме малко по-къса програма, която прави същото:

.. activecode:: console__text_input_int2

    n = int(input("Enter a whole number: "))
    print(n+n)

~~~~

За истинско число, int трябва просто да бъде заменен с float, защото функцията float () преобразува текстова стойност в реално число. Например, ако искаме да заредим истинско число и да отпечатаме два пъти това число, програмата може да изглежда така:

.. activecode:: console__text_input_float1

    s = input("Enter a real number: ")
    a = float(s)
    print(2*a)

или

.. activecode:: console__text_input_float2

    a = float(input("Enter a real number: "))
    print(2*a)


Вижте какво се случва в тези два примера, когато въведете нещо друго, а не число.

Относно реализациите
--------------------

Ние видяхме, че когато низ съдържа цяло число или реално число, този низ може да бъде преобразуван в цяло число или реален тип с помощта на функциите int () или float (). От другата страна, цели числа и реални числа винаги могат да бъдат преобразувани в низ. Функцията str () се използва за преобразуване в низ.

.. activecode:: console__text_convert_to_str

    a = 1
    a_str = str(a)
    print(a_str + a_str)

    b = 2.1
    b_str = str(b)
    print(b_str + b_str)

Преобразуването на целочислена стойност в истинска се извършва автоматично, когато е необходимо, въпреки че можем да направим това изрично, като извикаме функцията float.

.. activecode:: console__text_convert_int_to_float

    print(float(1))
    
И обратното, когато трябва да преобразуваме истинско число в цяло число, това преобразуване не се извършва автоматично (по причина) и трябва да бъде зададено в програмата чрез извикване на функцията int (). При преобразуване на реално число в цяло число всички десетични знаци от реалното число се отхвърлят, което означава, че закръглянето винаги е теглено ards нула. С други думи, когато стойността на реалното число x не е цяло число, * int (x) * е по-близо до нула от x.

.. activecode:: console__text_convert_int_float

    print(float(1))
    
    print(int(1.68))
    print(int(-1.68))
    
Въпроси
-------

.. mchoice:: console__text_quiz_1
    :answer_a: The program will print 5
    :answer_b: The program will print 23
    :answer_c: An error will occur when trying to add a string and a number
    :correct: c
    :feedback_a: Try again.
    :feedback_b: Try again.
    :feedback_c: Correct!
    
    Какво се случва, когато стартираме следващата програма и въведем ``2``?
    
    .. code::
    
        a = input()
        print(a+3)

.. mchoice:: console__text_quiz_2
    :answer_a: The program will print 5
    :answer_b: The program will print 23
    :answer_c: An error will occur when trying to add a string and a number
    :correct: b
    :feedback_a: Try again
    :feedback_b: Correct
    :feedback_c: Try again
    
    Какво се случва, когато стартираме следващата програма и въведем ``2``?
    
    .. code::
    
        a = input()
        print(a+'3')

.. dragndrop:: console__text_quiz_4
    :feedback: Try again!
    :match_1: '2.11'|||str(2.1) + '1'
    :match_2: 3.1|||float('2.1') + 1
    :match_3: error in computation|||float('2.1') + '1'
    :match_4: 2.11|||float('2.1') + 1/100
    :match_5: '3.1'|||str(2.1 + int('1'))

    Съпоставете изразите с резултатите от изчислението.


.. mchoice:: console__text_quiz_5
   :answer_a: When the first decimal place of a is greater than or equal to 5
   :answer_b: When the number a is negative
   :answer_c: When the number a is positive
   :answer_d: When the number a is single-digit
   :answer_e: When the difference between a and int(a) is greater than 0.5
   :correct: b
   :feedback_a: Try again.
   :feedback_b: Correct!
   :feedback_c: Try again.
   :feedback_d: Try again.
   :feedback_e: Try again.

   Кога е цяло число  *int(a)* по-голямо от реалното число a?

