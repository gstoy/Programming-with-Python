Преброяване и сумиране
======================

Често срещан случай е, че се интересуваме само от някои данни от колекция. Тук ще практикуваме как да броим и, ако е необходимо, да сумираме числа, които ни интересуват или изпълняват някакво условие.

Преброяване
-----------

Общата форма на програма (алгоритъм), чрез която броим елементите на колекция, които отговарят на дадено условие, изглежда така:
.. code::

    num = 0
    for x in collection:
        if (x meets the condition):
            num += 1
    print(num)
    
.. infonote::

    x + = a увеличава стойността на променливата x с a. Това всъщност е съкратена форма на израза x = x + a, която присвоява стойността x + a на променливата x.

    x - = a намалява стойността на променливата x с a. Това е съкратена форма на израза x = x - a, който присвоява стойността x - a на променливата x.

В нашия пример, операторът *num += 1* увеличава стойността на променливата *br* с 1.


Примери и задачи
''''''''''''''''

.. questionnote::

    **Пример - среща:** 
    
    Ръководителят на екипа предложи два варианта за времето на срещата, която ще се проведе утре. Всеки член на екипа написа в таблица кой термин би бил по-подходящ за него / нея (1 за първия мандат, 2 за втория). Тази информация беше прехвърлена на първия ред на следната програма.

    Попълнете програмата - скрипт, така че предвид данните за гласуване на членовете на екипа, тя отпечатва колко са гласували за първия и колко за втория.

.. activecode:: console__counting_meeting

    terms = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)
    
Например, можем да преброим броя на членовете на екипа, гласували за първия вариант, и да изчислим останалите в края.

.. activecode:: console__counting_meeting_sol1

    terms = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    num_first_term = 0
    for t in terms:
        if t == 1:
            num_first_term += 1
            
    num_second_term = len(terms) - num_first_term

    print(num_first_term, 'members voted for the first term and', num_second_term, 'for the second term.')

Друг начин е да се броят гласовете както за първия, така и за втория.

.. activecode:: console__counting_meeting_sol2

    terms = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    num_first_term = 0
    num_second_term = 0
    for t in terms:
        if t == 1:
            num_first_term += 1
        if t == 2:
            num_second_term += 1
    print(num_first_term, 'members voted for the first term and', num_second_term, 'for the second term.')

или, ако приемем, че данните са „чисти“, т.е. няма стойности, различни от 1 и 2:

.. activecode:: console__counting_meeting_sol3

    terms = (1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1)

    num_first_term = 0
    num_second_term = 0
    for t in terms:
        if t == 1:
            num_first_term += 1
        else:
            num_second_term += 1
            
    print(num_first_term, 'members voted for the first term and', num_second_term, 'for the second term.')

В случай, че информацията не е известна предварително, но трябва да бъде въведена, можем да напишем програма като тази:

.. activecode:: console__counting_meeting_sol4

    n = int(input("How many team members voted: "))
    num_first_term = 0
    for i in range(n):
        t = int(input("Enter one vote: "))
        if t == 1:
            num_first_term += 1
            
    num_second_term = n - num_first_term
    print(num_first_term, 'members voted for the first term and', num_second_term, 'for the second term.')

В началото на тази програма зареждаме броя на гласовете *n*, след което използваме *for* цикъл, за да повторим зареждането и преброяването на един глас *n* пъти.


.. questionnote::

    **Задача - писмен тест:** 
    
    Няколко души преминаха теста за владеене на трафика, което е предпоставка за полагане на практическата част от изпита. Тестът се счита за положен, ако броят на грешните отговори е по-малък или равен на 3.

    В началото на скрипта са дадени резултатите от теста на една група кандидати (брой грешни отговори за всеки човек, който е взел теста). Допълнете го, като посочите колко кандидати са преминали теста.

.. activecode:: console__counting_test

    num_incorrect = (2, 5, 1, 0, 4, 2, 7, 1)
    passed = 0

    # add the missing statements here
    
    print(passed)
    
.. commented out
    
    passed = 0
    for x in num_incorrect:
        if x <= 3:
            passed += 1
    print(passed)



.. questionnote::

    **Задача - басейн** 
    
    За група деца се подготвя посещение на басейна. Всеки по-нисък от 160 сантиметра може да влезе само в по-малкия басейн. Организаторът се интересува колко деца са под 160 сантиметра, за да планират групите.

    Детските височини са дадени в началото на програмата. Изпълнете програмата, за да отпечатате броя на децата под 160 сантиметра.
    
.. activecode:: console__counting_swimmingpool

    heights = (160, 161, 174, 149, 153, 160, 158, 182, 144)
    
    


.. questionnote::

    **Задача - влажност** 
    
    В ботаническа градина се измерва влагата на почвата веднъж на ден за редки и чувствителни видове. Влажността се изразява в числа от 0 до 1, а условията за развитие на растенията се считат за добри, когато влажността е между 0,3 и 0,7 (включително граници).

    Стойностите на влажността (измерени за период от време) са дадени в началото на скрипта. Завършете скрипта, като отпечатате броя на дните, когато влажността не беше добра.

.. activecode:: console__counting_humidity

    humidity = (0.2, 0.5, 0.61, 0.40, 0.72, 0.51, 0.43, 0.35, 0.28)
    


Сумиране
--------

В една голяма група практически проблеми стигаме до резултата, като постепенно го изграждаме (натрупваме), докато преминаваме през данните. Например, ако се нуждаем от сумата от някои числа, можем да стигнем до нея по този общ начин:

.. code::

    total = 0
    for num in collection:
        total += num
    print(total)


Когато изчисляваме сумата от всички елементи на колекция, получаваме същия резултат, като извикваме функцията *sum*:

.. code::

    print(sum(collection))

Ще използваме постепенно формиране на резултатите, когато имаме нужда само от някои елементи от колекцията, тоест от тези, които отговарят на даденото условие. В този случай алгоритъмът за изчисляване на сумата обикновено изглежда така:

.. code::

    total = 0
    for num in collection:
        if (num meets the condition):
            total += num
    print(total)

За да се получи средната стойност на данните, които отговарят на дадено условие, е необходимо да се преброят и сумират такива данни и след това да се раздели тяхната сума на техния брой. В общия случай изглежда така:

.. code::

    total = 0
    counter = 0
    for num in collection:
        if (num meets the condition):
            total += num
            counter += 1
    print(total / counter)

Обърнете внимание, че в Python сумата и средната стойност на избраните елементи от колекцията могат да бъдат получени по по-кратък и по-ефективен начин. Избрахме горния метод, защото изглежда почти същото, както в другите езици за програмиране.

Примери и задачи
''''''''''''''''

.. questionnote::

    **Пример - резултат от IQ тест :** 
    
    Дадени са резултатите от IQ тест за група хора. Резултат от -1 означава, че лицето не е взело теста. Завършете програмата, като отпечатате средната стойност, получена на теста.

.. activecode:: console__accumulate_IQ

    iq_results = (-1, 98, 115, -1, 83, 130, 101, 122, -1, 108)

Можем да напишем програмата така:

.. activecode:: console__accumulate_IQ_sol

    iq_results = (-1, 98, 115, -1, 83, 130, 101, 122, -1, 108)
    num_tested = 0
    iq_sum = 0
    
    for result in iq_results:
        if result != -1:
            iq_sum += result
            num_tested += 1

    if num_tested > 0:
        mean_iq = iq_sum / num_tested
        print('Mean IQ is', mean_iq)
    else:
        print('No one was tested.')


.. questionnote::

    **Задача - дежурна:**  
    
    В компания X от време на време всички служители остават дежурни. Нормата за предишния период е 20 часа в дежурство. Всеки допълнителен час (над 20 часа) при дежурство се заплаща допълнително. Броят дежурни часове за всеки служител е посочен, а директорът иска да знае общия брой часове на дежурство над нормата.

    Завършете програмата, като изчислите и отпечатате общия брой извънредни часове в дежурство.

Ако решите задачата правилно, трябва да получите оценка 25 за дадените данни,  тъй като :math:`(21-20)+(23-20)+(34-20)+(25-20)+(22-20)=25`.


.. activecode:: console__accumulate_overtime

    norm = 20
    hours_on_duty = (21, 23, 19, 34, 25, 22, 17)
    total_overtime = 0
    # complete the program
    
    print('Total overtime on call is', total_overtime)
    
.. commented out
    
    norma = 20
    hours_on_duty = (21, 23, 19, 34, 25, 22, 17)
    total_overtime = 0
    for hours in hours_on_duty:
        if hours > norm:
            total_overtime += (hours - norm)
    print('Total overtime on duty is', total_overtime)






.. questionnote::

    **Задача - среден добив:**  
    
    В една овощна градина след третата година се следи добивът на слива на дърво. Дърветата с добиви под 3 килограма се считат за повредени или болни и ще бъдат извадени.

    Дава се добивът на всички дървета в овощната градина. Завършете програмата, като изчислите и отпечатате средния добив на здрави дървета (с добиви от 3 килограма или повече).

    
Трябва да получите резултат от приблизително 14.757 за дадените данни.

    
.. activecode:: console__accumulate_yield

    yield_per_plant = (11.3, 15.8, 9.5, 2.6, 21.1, 13.4, 17.9, 0.7, 14.3)
    
    # complete the program
